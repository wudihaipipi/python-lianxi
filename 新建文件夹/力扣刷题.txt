1. 两数之和
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。
输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。

    def twoSum(nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        lens = len(nums)
        j = -1
        for i in range(1, lens):
            types = nums[:i]
            if (target-nums[i]) in types:
                j = types.index(target-nums[i])
                break
        if j>=0:
            return [j, i]        
    nums = [2,7,11,15]
    ret = twoSum(nums, 9)
    print(ret)
2，回文数
给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。

回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

例如，121 是回文，而 123 不是。

def isPalindrome(x):
        """
        :type x: int
        :rtype: bool
        """
        x=str(x)
        if x==x[::-1]:
            return True
        else:
            return False
    ret = isPalindrome(121)
    print(ret)